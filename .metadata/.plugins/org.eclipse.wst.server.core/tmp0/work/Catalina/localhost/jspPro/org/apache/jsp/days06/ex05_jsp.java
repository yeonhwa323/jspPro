/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-04-25 07:08:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days06;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1098678824000L));
    _jspx_dependants.put("jar:file:/C:/E/Sist/Class/Workspace/JSPClass/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jspPro/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"http://localhost/jspPro/images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/jspPro/resources/cdn-main/example.css\">\r\n");
      out.write("<script src=\"/jspPro/resources/cdn-main/example.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write(" span.material-symbols-outlined{\r\n");
      out.write("    vertical-align: text-bottom;\r\n");
      out.write(" }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("  <h1 class=\"main\"><a href=\"#\" style=\"position: absolute;top:30px;\">yeon HOme</a></h1>\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li><a href=\"#\">로그인</a></li>\r\n");
      out.write("    <li><a href=\"#\">회원가입</a></li>\r\n");
      out.write("  </ul>\r\n");
      out.write("</header>\r\n");
      out.write("<h3>\r\n");
      out.write("  <span class=\"material-symbols-outlined\">view_list</span> jsp days00\r\n");
      out.write("</h3>\r\n");
      out.write("<div>\r\n");
      out.write("  <xmp class=\"code\">\r\n");
      out.write("     [ex05.jsp]\r\n");
      out.write("     \r\n");
      out.write("     1. 모델2구조의 MVC패턴\r\n");
      out.write("     \r\n");
      out.write("     	1) 모델1구조\r\n");
      out.write("     	  [list.jsp] -> 요청 ->  list.jsp\r\n");
      out.write("     	  			 <- 응답 <-\r\n");
      out.write("     	  			 \r\n");
      out.write("     	2) 모델2구조\r\n");
      out.write("     	  [list.htm] -> 요청 -> [서버]\r\n");
      out.write("     	  						로직처리 담당자(서블릿)\r\n");
      out.write("     	  						request.setAttribute(\"list\", list);\r\n");
      out.write("     	  						   ↓\r\n");
      out.write("     	  						출력담당자(jsp)\r\n");
      out.write("     	  						list.jsp\r\n");
      out.write("     	  						request.getAttribute(\"list\", list)\r\n");
      out.write("     	  			 <- 응답 <-\r\n");
      out.write("           여러 형태의 디자인패턴 MVP, [MVC패턴], MVVC 등등\r\n");
      out.write("      \r\n");
      out.write("      2. MVC 패턴에 대한 이해\r\n");
      out.write("      	Model 	   - 각각의 요청마다 로직을 처리 (비즈니스 영역)        --> 클래스\r\n");
      out.write("      	View 	   - 사용자가 보게될 화면 출력 담당 (프레젠테이션 영역) --> 클래스\r\n");
      out.write("      	\r\n");
      out.write("      	Controller - [요청->응답] 흐름 제어 담당  						--> 서블릿\r\n");
      out.write("      				 [모든 요청 받아 응답의 전체과정 처리 흐름 제어 담당]\r\n");
      out.write("      	\r\n");
      out.write("      	사용자 list.htm -> 요청 -> \r\n");
      out.write("      	\r\n");
      out.write("      3. 실습	   [게시판 구현 -> MVC 패턴으로 수정]\r\n");
      out.write("      	1) days04 > board 폴더 복사해서 days06 폴더 붙이기\r\n");
      out.write("      		M[]V]C\r\n");
      out.write("      		\r\n");
      out.write("      	2) days04.board 패키지 - 서블릿 List.java\r\n");
      out.write("      	   days04.board.domain 패키지 - VO, DTO\r\n");
      out.write("      	   days04.board.persistence 패키지 - DAO\r\n");
      out.write("      	   \r\n");
      out.write("      	   days06.mvc.domain 패키지\r\n");
      out.write("      	   days06.mvc.persistence 패키지\r\n");
      out.write("      	   days06.mvc.command 패키지 - [M]VC\r\n");
      out.write("      	   days06.mvc.service 패키지\r\n");
      out.write("      	   days06.mvc.controller 패키지 - MV[C]\r\n");
      out.write("      	   \r\n");
      out.write("       3) 모든 요청 -> 흐름 제어 MV[C] 컨트롤러\r\n");
      out.write("       	  ㄱ. 서블릿\r\n");
      out.write("              url-pattern : 4가지\r\n");
      out.write("              				 /			[*.do](*.확장자) \r\n");
      out.write("          ㄴ. /board/list.do,write.do,edit.do,delete.do  약속\r\n");
      out.write("              파일생성  \r\n");
      out.write("              WEB-INF 폴더 안 - commandHandler.properties\r\n");
      out.write("              /board/list.do=모델\r\n");
      out.write("              /board/write.do=모델\r\n");
      out.write("          ㄷ. 컨트롤러(controller) 역할 - DispatcherServlet\r\n");
      out.write("          모든 요청 -> list.do, write.do 등등\r\n");
      out.write("          			   1) 요청 url 파악\r\n");
      out.write("          			   2) commandHandler.properties 찾아서\r\n");
      out.write("          			   	  list.do=[모델 객체]\r\n");
      out.write("          			   	  요청 처리할 모델 객체를 얻어와서\r\n");
      out.write("          			   	      implement 할 CommandHandler.java 인터페이스 process()\r\n");
      out.write("          			   	   CommandHandler command = ListHandler.java\r\n");
      out.write("          			   	   							  process() r.s()\r\n");
      out.write("          			   	   list.jsp +포워딩/리다이렉트 = command.process();\r\n");
      out.write("       4) web_days05.xml\r\n");
      out.write("          web.xml\r\n");
      out.write("       5) [M]VC\r\n");
      out.write("          ㄱ. CommandHandler 인터페이스\r\n");
      out.write("          		String    list.jsp, write.jsp   M[V]C 뷰\r\n");
      out.write("          		process()		r.s(결과물 저장)\r\n");
      out.write("          		\r\n");
      out.write("          ㄴ. 글목록 [M]VC  ListHandler.java == List.java\r\n");
      out.write("       \r\n");
      out.write("       \r\n");
      out.write("        \r\n");
      out.write("  </xmp>\r\n");
      out.write("  \r\n");
      out.write("  <a href=\"/jspPro/board/list.do\">/board/list.do</a>\r\n");
      out.write("  <!-- URL값 // http://localhost/jspPro/board/list.do -->  \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<!--     수업 정리\r\n");
      out.write("[ 모델 2구조의 MVC 디자인 패턴 ]\r\n");
      out.write("1. DS.java\r\n");
      out.write("	chMap<url, H>\r\n");
      out.write("	init(){\r\n");
      out.write("	}\r\n");
      out.write("	destroy(){} -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
