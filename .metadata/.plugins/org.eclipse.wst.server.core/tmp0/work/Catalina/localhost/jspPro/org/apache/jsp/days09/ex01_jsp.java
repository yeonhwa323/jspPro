/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-04-30 08:41:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days09;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1098678824000L));
    _jspx_dependants.put("jar:file:/C:/E/Sist/Class/Workspace/JSPClass/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jspPro/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"http://localhost/jspPro/images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/jspPro/resources/cdn-main/example.css\">\r\n");
      out.write("<script src=\"/jspPro/resources/cdn-main/example.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write(" span.material-symbols-outlined{\r\n");
      out.write("    vertical-align: text-bottom;\r\n");
      out.write(" }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("  <h1 class=\"main\"><a href=\"#\" style=\"position: absolute;top:30px;\">yeon HOme</a></h1>\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li><a href=\"#\">로그인</a></li>\r\n");
      out.write("    <li><a href=\"#\">회원가입</a></li>\r\n");
      out.write("  </ul>\r\n");
      out.write("</header>\r\n");
      out.write("<h3>\r\n");
      out.write("  <span class=\"material-symbols-outlined\">view_list</span> jsp days00\r\n");
      out.write("</h3>\r\n");
      out.write("<div>\r\n");
      out.write("  <xmp class=\"code\">\r\n");
      out.write("    [파일 업로드 방법]\r\n");
      out.write("    1. 개발자가 직접 구현하는 방법 - 잘 사용 X\r\n");
      out.write("    	request.getInputStream();\r\n");
      out.write("    2. 외부 라이브러리 사용 ***\r\n");
      out.write("    	ㄱ. http:www.servlet.com\r\n");
      out.write("    	ㄴ. cos-22.05.zip 다운로드\r\n");
      out.write("    			cos.jar\r\n");
      out.write("    			WEB-INF > lib 에 저장\r\n");
      out.write("    	ㄷ. form method=post		\r\n");
      out.write("    			encoding=multipart/form-data\r\n");
      out.write("    		request 객체로 파라미터를 얻어올 수 없다. null\r\n");
      out.write("    		cos.jar 추가\r\n");
      out.write("    		 ㄴ [MultipartRequest] 클래스 제공\r\n");
      out.write("    	\r\n");
      out.write("    	(개념 이해)\r\n");
      out.write("    MultipartRequest mrequest = new MultipartRequest(ㄱ,ㄴ,ㄷ,ㄹ,ㅁ);\r\n");
      out.write("    	ㄱ - JSP의 request 객체\r\n");
      out.write("    	ㄴ - 서버에 저장될 위치(업로드 경로)\r\n");
      out.write("    	ㄷ - 최대 파일 크기\r\n");
      out.write("    	ㄹ - 파일의 인코딩 방식\r\n");
      out.write("    	ㅁ - 파일 중복 처리 하기위한 인자(클래스 제공)\r\n");
      out.write("    	\r\n");
      out.write("    	실습 ) \r\n");
      out.write("    	ex02.jsp\r\n");
      out.write("    	ex02_ok.jsp    			\r\n");
      out.write("    	\r\n");
      out.write("    3. 서블릿 3.0 또는 3.1 에서 제공하는 라이브러리.\r\n");
      out.write("      1) HttpServletReqeust request 의 [getPart()]를 이용해서 \r\n");
      out.write("         업로드된 데이터(파일) 접근할 수 있는 [Part 객체]\r\n");
      out.write("            .getName() : 파라미터 이름\r\n");
      out.write("            .getContentType() : Content Type \r\n");
      out.write("            .getSize() : 업로드한 파일 크기\r\n");
      out.write("            .getSubmittedFileName() : 업로드한 파일명 \r\n");
      out.write("            .getInputStream()  \r\n");
      out.write("            .write() : Part의 업로드 데이터를 파일명이 지정한 파일에 복사.\r\n");
      out.write("            .delete() : 생성된 임시 파일을 삭제.\r\n");
      out.write("            .getHeader() : 해당 Part에서 지정한 이름의 헤더 값을 얻어온다.\r\n");
      out.write("                \r\n");
      out.write("      2) 서블릿이 multipart 데이터를 처리할 수 있도록 세팅..\r\n");
      out.write("      	- web.xml 설정\r\n");
      out.write("      	- @MultipartConfig 어노테이션을 사용해서 설정. \r\n");
      out.write("      	\r\n");
      out.write("      	실습)\r\n");
      out.write("      	 1) 서블릿 days09.UploadServlet.java - 파일 처리를 위한 객체\r\n");
      out.write("      	 2) web.xml 설정\r\n");
      out.write("      	 3) ex03.jsp\r\n");
      out.write("  </xmp>  \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
